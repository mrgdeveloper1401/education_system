# Generated by Django 5.1.5 on 2025-03-03 05:32

import accounts.managers
import accounts.validators
import api.v1.user.utils
import django.contrib.postgres.fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="BestStudent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(editable=False, null=True)),
                ("is_deleted", models.BooleanField(editable=False, null=True)),
                ("student", models.CharField(help_text="نام دانش اموز", max_length=50)),
                (
                    "student_image",
                    models.ImageField(
                        help_text="حجم عکس اپلودی نباید بیش تر از یک مگابایت باشد",
                        null=True,
                        upload_to="best_student_image/%Y/%m/%d",
                        validators=[accounts.validators.validate_upload_image_user],
                    ),
                ),
                ("is_publish", models.BooleanField(default=True)),
                ("description", models.CharField(max_length=500, null=True)),
                (
                    "attributes",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=20), null=True, size=None
                    ),
                ),
            ],
            options={
                "db_table": "best_student",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="City",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "city",
                    models.CharField(db_index=True, max_length=40, verbose_name="شهر"),
                ),
            ],
            options={
                "verbose_name": "شهر",
                "verbose_name_plural": "شهر ها",
                "db_table": "city",
            },
        ),
        migrations.CreateModel(
            name="Otp",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "mobile_phone",
                    models.CharField(
                        max_length=11,
                        validators=[accounts.validators.MobileRegexValidator()],
                        verbose_name="mobile phone",
                    ),
                ),
                (
                    "code",
                    models.CharField(blank=True, max_length=6, verbose_name="code"),
                ),
                (
                    "expired_date",
                    models.DateTimeField(blank=True, verbose_name="expired date"),
                ),
            ],
            options={
                "verbose_name": "کد",
                "verbose_name_plural": "کد ها",
                "db_table": "otp_code",
                "ordering": ("created_at",),
            },
        ),
        migrations.CreateModel(
            name="RequestLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("path", models.CharField(max_length=255)),
                ("method", models.CharField(max_length=10)),
                ("meta_data", models.JSONField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "request_log",
            },
        ),
        migrations.CreateModel(
            name="State",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "state_name",
                    models.CharField(max_length=30, unique=True, verbose_name="استان"),
                ),
            ],
            options={
                "verbose_name": "استان",
                "verbose_name_plural": "استان ها",
                "db_table": "state",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(editable=False, null=True)),
                ("is_deleted", models.BooleanField(editable=False, null=True)),
                (
                    "mobile_phone",
                    models.CharField(
                        max_length=11,
                        unique=True,
                        validators=[accounts.validators.MobileRegexValidator()],
                        verbose_name="mobile phone",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                ("is_staff", models.BooleanField(db_index=True, default=False)),
                ("is_verified", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "password",
                    models.CharField(
                        blank=True, max_length=128, null=True, verbose_name="password"
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="user_image/%Y/%m/%d",
                        validators=[accounts.validators.validate_upload_image_user],
                        verbose_name="عکس",
                    ),
                ),
                (
                    "second_mobile_phone",
                    models.CharField(
                        blank=True,
                        max_length=11,
                        null=True,
                        validators=[accounts.validators.MobileRegexValidator()],
                        verbose_name="شماره تماس دوم",
                    ),
                ),
                (
                    "nation_code",
                    models.CharField(
                        max_length=10,
                        null=True,
                        unique=True,
                        validators=[accounts.validators.NationCodeRegexValidator()],
                        verbose_name="کد ملی",
                    ),
                ),
                (
                    "address",
                    models.TextField(blank=True, null=True, verbose_name="ادرس"),
                ),
                (
                    "is_coach",
                    models.BooleanField(default=False, verbose_name="به عنوان مربی"),
                ),
                (
                    "birth_date",
                    models.DateField(blank=True, null=True, verbose_name="تاریخ نولد"),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[("male", "پسر"), ("Female", "دختر")],
                        max_length=6,
                        null=True,
                        verbose_name="gender",
                    ),
                ),
                (
                    "grade",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("one", "اول"),
                            ("two", "دوم"),
                            ("three", "سوم"),
                            ("four", "چهارم"),
                            ("five", "پنجم"),
                            ("six", "ششم"),
                            ("seven", "هفتم"),
                            ("eight", "هشتم"),
                            ("nine", "نهم"),
                            ("ten", "دهم"),
                            ("eleven", "یازدهم"),
                            ("twelfth", "دوازدهم"),
                            ("graduate", "فارغ التحصیل"),
                        ],
                        max_length=8,
                        null=True,
                        verbose_name="grade",
                    ),
                ),
                (
                    "school",
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name="نام مدرسه"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "city",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="student_city",
                        to="accounts.city",
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="state",
                        to="accounts.state",
                        verbose_name="استان",
                    ),
                ),
            ],
            options={
                "verbose_name": "کاربر",
                "verbose_name_plural": "کاربران",
                "db_table": "users",
                "ordering": ("-created_at",),
            },
            managers=[
                ("objects", accounts.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="RecycleUser",
            fields=[],
            options={
                "verbose_name": "کاربر پاک شده",
                "verbose_name_plural": "کاربران پاک شده",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("accounts.user",),
        ),
        migrations.CreateModel(
            name="Coach",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(editable=False, null=True)),
                ("is_deleted", models.BooleanField(editable=False, null=True)),
                ("coach_number", models.CharField(blank=True, max_length=15)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="coach",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "استاد",
                "verbose_name_plural": "اساتید",
                "db_table": "coach",
            },
        ),
        migrations.AddField(
            model_name="city",
            name="state",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="cites",
                related_query_name="city",
                to="accounts.state",
                verbose_name="استان",
            ),
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(editable=False, null=True)),
                ("is_deleted", models.BooleanField(editable=False, null=True)),
                ("student_number", models.CharField(max_length=11)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="student",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "دانش اموز",
                "verbose_name_plural": "دانش اموزان",
                "db_table": "student",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Ticket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(editable=False, null=True)),
                ("is_deleted", models.BooleanField(editable=False, null=True)),
                ("ticket_body", models.TextField(verbose_name="متن تیکت")),
                (
                    "ticket_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=api.v1.user.utils.ticket_image_upload_url,
                        validators=[api.v1.user.utils.ticket_validate_image],
                    ),
                ),
                ("is_publish", models.BooleanField(default=True)),
                (
                    "sender",
                    models.ForeignKey(
                        limit_choices_to={"is_active": True},
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="sender",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "تیکت",
                "verbose_name_plural": "تیکت ها",
                "db_table": "ticket",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="TicketReply",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(editable=False, null=True)),
                ("is_deleted", models.BooleanField(editable=False, null=True)),
                ("message", models.TextField()),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=api.v1.user.utils.ticket_image_upload_url,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "sender",
                    models.ForeignKey(
                        limit_choices_to={"is_staff": True},
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="reply_sender",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="reply",
                        to="accounts.ticket",
                    ),
                ),
            ],
            options={
                "db_table": "ticket_reply",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="TicketRoom",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(editable=False, null=True)),
                ("is_deleted", models.BooleanField(editable=False, null=True)),
                (
                    "title_room",
                    models.CharField(help_text="عنوان چت روم تیکت", max_length=50),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_close", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        limit_choices_to={"is_active": True},
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="ticker_room",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "ticker_room",
                "ordering": ("-created_at",),
            },
        ),
        migrations.AddField(
            model_name="ticket",
            name="room",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="room",
                to="accounts.ticketroom",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="city",
            unique_together={("state", "city")},
        ),
    ]
