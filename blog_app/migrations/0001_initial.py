# Generated by Django 5.1.5 on 2025-03-03 00:06

import django.db.models.deletion
import django_ckeditor_5.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CategoryBlog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(editable=False, null=True)),
                ("is_deleted", models.BooleanField(editable=False, null=True)),
                ("path", models.CharField(max_length=255, unique=True)),
                ("depth", models.PositiveIntegerField()),
                ("numchild", models.PositiveIntegerField(default=0)),
                ("category_name", models.CharField(max_length=255)),
                ("category_slug", models.SlugField(allow_unicode=True, max_length=255)),
                ("is_publish", models.BooleanField(default=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TagBlog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(editable=False, null=True)),
                ("is_deleted", models.BooleanField(editable=False, null=True)),
                ("tag_name", models.CharField(max_length=255)),
                ("is_publish", models.BooleanField(default=True)),
            ],
            options={
                "db_table": "blog_tag",
            },
        ),
        migrations.CreateModel(
            name="PostBlog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(editable=False, null=True)),
                ("is_deleted", models.BooleanField(editable=False, null=True)),
                (
                    "post_introduction",
                    models.CharField(help_text="مقدمه ای در مورد پست", max_length=255),
                ),
                ("post_title", models.CharField(help_text="عنوان پست", max_length=255)),
                ("post_slug", models.SlugField(allow_unicode=True, max_length=255)),
                ("post_body", django_ckeditor_5.fields.CKEditor5Field()),
                (
                    "read_count",
                    models.PositiveIntegerField(
                        default=0, help_text="چند نفر این پست را دیده اند"
                    ),
                ),
                (
                    "read_time",
                    models.PositiveSmallIntegerField(
                        help_text="مدت زمان برای مطالعه این مقاله"
                    ),
                ),
                ("post_cover_image", models.ImageField(upload_to="blog/%Y/%m/%d")),
                ("likes", models.PositiveIntegerField(default=0)),
                ("is_publish", models.BooleanField(default=True)),
                (
                    "author",
                    models.ManyToManyField(
                        related_name="post_authors", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="blog_posts",
                        to="blog_app.categoryblog",
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True, related_name="post_tags", to="blog_app.tagblog"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FavouritePost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(editable=False, null=True)),
                ("is_deleted", models.BooleanField(editable=False, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="favourite_user_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="favourite_posts",
                        to="blog_app.postblog",
                    ),
                ),
            ],
            options={
                "db_table": "blog_favourite_post",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CommentBlog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(editable=False, null=True)),
                ("is_deleted", models.BooleanField(editable=False, null=True)),
                ("comment_body", models.TextField()),
                ("is_publish", models.BooleanField(default=True)),
                (
                    "reply",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="replies",
                        to="blog_app.commentblog",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="comment_user_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="comment_posts",
                        to="blog_app.postblog",
                    ),
                ),
            ],
            options={
                "db_table": "blog_comment",
                "ordering": ["-created_at"],
            },
        ),
    ]
